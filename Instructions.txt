# OpenAI Assistant + Streamlit 문서 기반 챗봇 구축 가이드

## 1. 환경 설정 및 준비

### 1.1 필요한 라이브러리 설치
```bash
pip install streamlit openai python-dotenv
```

### 1.2 OpenAI API 키 설정
```bash
# 환경변수 설정 (권장)
export OPENAI_API_KEY="your-openai-api-key"

# 또는 .env 파일에 저장
echo "OPENAI_API_KEY=your-openai-api-key" > .env
```

## 2. 핵심 구성 요소

### 2.1 OpenAI Assistant 생성
- **목적**: 문서 기반 질의응답 전용 어시스턴트
- **필요한 도구**: `file_search` (문서 검색)
- **모델**: gpt-4o-mini, gpt-4o, gpt-3.5-turbo 중 선택

### 2.2 Assistant Instructions (핵심)
```python
instructions = f"""
당신은 업로드된 문서의 전문가입니다. 다음 규칙을 엄격히 따라주세요:

1. 오직 업로드된 문서의 내용만을 기반으로 답변하세요.
2. 문서에 없는 내용에 대해서는 "해당 내용은 업로드된 문서에서 찾을 수 없습니다"라고 답변하세요.
3. 문서의 내용을 정확히 인용하고, 가능하면 해당 섹션을 명시하세요.
4. 문서 외의 일반적인 지식을 사용하지 마세요.
5. 답변할 때는 문서에서 관련된 부분을 먼저 찾아 확인한 후 답변하세요.
6. 불확실한 경우 문서를 다시 확인하세요.

업로드된 문서 파일: {uploaded_file.name}
"""
```

## 3. 주요 기능 구현

### 3.1 파일 업로드 및 Assistant 생성
```python
def upload_file_and_create_assistant():
    # 1. 파일을 OpenAI에 업로드
    uploaded_openai_file = client.files.create(
        file=(uploaded_file.name, file_content),
        purpose='assistants'
    )
    
    # 2. Assistant 생성
    assistant = client.beta.assistants.create(
        name=assistant_name,
        instructions=instructions,
        model=model_choice,
        tools=[{"type": "file_search"}],
        tool_resources={
            "file_search": {
                "vector_stores": [
                    {
                        "file_ids": [uploaded_openai_file.id]
                    }
                ]
            }
        }
    )
```

### 3.2 Thread 생성 및 메시지 처리
```python
def send_message(message):
    # 1. 메시지 추가
    client.beta.threads.messages.create(
        thread_id=st.session_state.thread_id,
        role="user",
        content=message
    )
    
    # 2. Run 생성 및 실행
    run = client.beta.threads.runs.create(
        thread_id=st.session_state.thread_id,
        assistant_id=st.session_state.assistant_id
    )
    
    # 3. 완료 대기
    while run_status.status != "completed":
        run_status = client.beta.threads.runs.retrieve(
            thread_id=st.session_state.thread_id,
            run_id=run.id
        )
        time.sleep(1)
    
    # 4. 응답 받기
    messages = client.beta.threads.messages.list(thread_id=st.session_state.thread_id)
    return messages.data[0].content[0].text.value
```

## 4. Streamlit UI 구성

### 4.1 사이드바 구성
- API 키 상태 표시
- 파일 업로드 (Markdown 파일)
- Assistant 모드 선택 (기존/새 생성)
- 새 대화 시작 버튼

### 4.2 메인 페이지 구성
- 채팅 인터페이스
- 메시지 히스토리
- 실시간 상태 표시
- 디버깅 정보 (선택사항)

## 5. 실행 방법

### 5.1 애플리케이션 실행
```bash
streamlit run openai_chatbot.py
```

### 5.2 사용 순서
1. OpenAI API 키 설정 확인
2. 사이드바에서 Markdown 파일 업로드
3. Assistant 모드 선택
4. 문서 관련 질문 입력
5. AI 응답 확인

## 6. 핵심 특징

### 6.1 문서 기반 답변
- 업로드된 문서만을 기반으로 답변
- 문서 외 지식 사용 금지
- 정확한 인용 및 참조

### 6.2 두 가지 모드 지원
- **기존 Assistant 사용**: 미리 설정된 Assistant 활용
- **새 Assistant 생성**: 커스텀 설정으로 새로 생성

### 6.3 Vector Store 활용
- 문서 검색을 위한 벡터 저장소
- 효율적인 문서 검색 및 관련성 평가

## 7. 세션 상태 관리

### 7.1 중요한 상태 변수
```python
if "messages" not in st.session_state:
    st.session_state.messages = []
if "assistant_id" not in st.session_state:
    st.session_state.assistant_id = None
if "thread_id" not in st.session_state:
    st.session_state.thread_id = None
if "file_id" not in st.session_state:
    st.session_state.file_id = None
```

### 7.2 세션 초기화
- 새 대화 시작 시 상태 초기화
- 기존 Assistant 삭제 (새 생성 모드에서만)
- 파일 업로드 내용 유지

## 8. 에러 처리 및 안전성

### 8.1 API 키 검증
- 환경변수 또는 코드 내 설정 확인
- 클라이언트 초기화 실패 시 에러 메시지

### 8.2 파일 업로드 검증
- 지원 파일 타입 확인 (.md)
- 파일 업로드 실패 시 에러 처리

### 8.3 Assistant 상태 모니터링
- Run 상태 추적
- 실패 시 적절한 에러 메시지

## 9. 개선 사항 및 확장 기능

### 9.1 지원 파일 타입 확장
- PDF, TXT, DOCX 등 추가 지원
- 파일 형식별 전처리 구현

### 9.2 UI/UX 개선
- 채팅 히스토리 저장/불러오기
- 응답 시간 표시
- 메시지 편집/삭제 기능

### 9.3 성능 최적화
- 캐싱 시스템 구현
- 비동기 처리 적용
- 대용량 문서 처리 최적화

## 10. 보안 및 모범 사례

### 10.1 API 키 보안
- 환경변수 사용 (코드 내 하드코딩 금지)
- .env 파일 .gitignore 추가

### 10.2 자원 관리
- 사용하지 않는 Assistant 정리
- 파일 업로드 용량 제한
- 세션 시간 제한

### 10.3 사용자 경험
- 로딩 상태 표시
- 명확한 에러 메시지
- 사용법 안내 제공

이 가이드를 따라하면 OpenAI Assistant와 Streamlit을 활용한 문서 기반 챗봇을 성공적으로 구축할 수 있습니다.